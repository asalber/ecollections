Prefix(:=<http://purl.org/ceu/lco#>)
Prefix(dc:=<http://purl.org/dc/elements/1.1/>)
Prefix(eco:=<http://purl.org/ceu/eco#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(eco2:=<http://purl.org/ceu/eco/1.0#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(swrl:=<http://www.w3.org/2003/11/swrl#>)
Prefix(swrlb:=<http://www.w3.org/2003/11/swrlb#>)


Ontology(<http://purl.org/ceu/eco>
<http://purl.org/ceu/eco/1.0>
Import(<http://www.essepuntato.it/2009/10/error>)
Annotation(dc:title "E-Collections ontology"@en)
Annotation(dc:rights "La ontología E-Collections está bajo una licencia de Creative Commons Reconocimiento-CompartirIgual 4.0 Internacional ( http://creativecommons.org/licenses/by-sa/4.0/)."@es)
Annotation(owl:versionInfo "Versión 1.0 01/02/2015"@de)
Annotation(rdfs:comment "La ontología E-Collections define una clasificación taxonómica de distintos tipos de colecciones de acuerdo a las características de homogeneidad, unicidad, orden y cardinalidad."@es)
Annotation(owl:versionInfo "Version 1.0 2015/02/01"@en)
Annotation(dc:creator "Alfredo Sánchez Alberca (asalber@ceu.es) <http://aprendeconalf.es/foaf.rdf>"@es)
Annotation(rdfs:label "E-Collections Ontology"@en)
Annotation(dc:rights "E-Collections ontology is released under Attribution-ShareAlike 4.0 International Creative Commons license: http://creativecommons.org/licenses/by-sa/4.0/"@en)
Annotation(rdfs:label "Ontología E-Collections"@es)
Annotation(dc:title "Ontología E-Collections"@es)
Annotation(rdfs:comment "The E-Collections ontology defines a collections taxonomy for different collection types based on the structural properties of homogeneity, uniqueness, order and cardinality."@en)

Declaration(Class(eco:Box))
Declaration(Class(eco:Collection))
Declaration(Class(eco:Combination))
Declaration(Class(eco:FixedCardinalityCollection))
Declaration(Class(eco:Heterocombination))
Declaration(Class(eco:Heteroranking))
Declaration(Class(eco:Heteroset))
Declaration(Class(eco:Heterovariation))
Declaration(Class(eco:HomogeneousCollection))
Declaration(Class(eco:Item))
Declaration(Class(eco:List))
Declaration(Class(eco:Multicombination))
Declaration(Class(eco:Multiheteroset))
Declaration(Class(eco:Multiset))
Declaration(Class(eco:OrderedCollection))
Declaration(Class(eco:OrderedItem))
Declaration(Class(eco:Ranking))
Declaration(Class(eco:Sequence))
Declaration(Class(eco:Set))
Declaration(Class(eco:Tuple))
Declaration(Class(eco:UniquenessCollection))
Declaration(Class(eco:Variation))
Declaration(Class(eco:Vector))
Declaration(Class(<http://purl.org/ceu/eco#1CardinalityCollection>))
Declaration(Class(<http://purl.org/ceu/eco#2CardinalityCollection>))
Declaration(Class(<http://purl.org/ceu/eco#3CardinalityCollection>))
Declaration(Class(owl:Thing))
Declaration(ObjectProperty(eco:followedByItem))
Declaration(ObjectProperty(eco:hasContent))
Declaration(ObjectProperty(eco:hasElement))
Declaration(ObjectProperty(eco:hasElementsOfType))
Declaration(ObjectProperty(eco:hasFirstItem))
Declaration(ObjectProperty(eco:hasItem))
Declaration(ObjectProperty(eco:hasLastItem))
Declaration(ObjectProperty(eco:hasNextItem))
Declaration(ObjectProperty(eco:hasOrderedItem))
Declaration(ObjectProperty(eco:hasPreviousItem))
Declaration(ObjectProperty(eco:isElementOf))
Declaration(ObjectProperty(eco:isFirstItemOf))
Declaration(ObjectProperty(eco:isItemOf))
Declaration(ObjectProperty(eco:isLastItemOf))
Declaration(ObjectProperty(eco:isOrderedItemOf))
Declaration(ObjectProperty(eco:precededByItem))
Declaration(ObjectProperty(owl:topObjectProperty))
Declaration(DataProperty(eco:hasCardinality))
Declaration(DataProperty(eco:hasIndex))
Declaration(DataProperty(<http://www.essepuntato.it/2009/10/error/hasError>))
Declaration(NamedIndividual(eco:Box))
Declaration(NamedIndividual(eco:Collection))
Declaration(NamedIndividual(eco:Combination))
Declaration(NamedIndividual(eco:Heterocombination))
Declaration(NamedIndividual(eco:Heteroranking))
Declaration(NamedIndividual(eco:Heteroset))
Declaration(NamedIndividual(eco:Heterovariation))
Declaration(NamedIndividual(eco:List))
Declaration(NamedIndividual(eco:Multicombination))
Declaration(NamedIndividual(eco:Multiheteroset))
Declaration(NamedIndividual(eco:Multiset))
Declaration(NamedIndividual(eco:Ranking))
Declaration(NamedIndividual(eco:Sequence))
Declaration(NamedIndividual(eco:Set))
Declaration(NamedIndividual(eco:Tuple))
Declaration(NamedIndividual(eco:Variation))
Declaration(NamedIndividual(eco:Vector))
Declaration(NamedIndividual(eco:col1))
Declaration(AnnotationProperty(dc:creator))
Declaration(AnnotationProperty(dc:rights))
Declaration(AnnotationProperty(rdfs:comment))
Declaration(AnnotationProperty(rdfs:label))
Declaration(Datatype(rdf:PlainLiteral))
Declaration(Datatype(xsd:integer))
Declaration(Datatype(xsd:nonNegativeInteger))
Declaration(Datatype(xsd:positiveInteger))
AnnotationAssertion(rdfs:comment eco:Box "A box is an heterogeneous, without uniqueness, non ordered and with fixed cardinality collection."@en)
AnnotationAssertion(rdfs:comment eco:Box "Una caja es una colección heterogénea, sin unicidad, no ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:label eco:Box "Caja"@es)
AnnotationAssertion(rdfs:label eco:Box "Box"@en)
SubClassOf(eco:Box eco:FixedCardinalityCollection)
SubClassOf(eco:Box eco:Multiheteroset)
AnnotationAssertion(rdfs:comment eco:Collection "A collection is a group of objects or elements."@en)
AnnotationAssertion(rdfs:comment eco:Collection "Una colección es una agrupación de objetos o elementos."@es)
AnnotationAssertion(rdfs:label eco:Collection "Colección"@es)
AnnotationAssertion(rdfs:label eco:Collection "Collection"@en)
DisjointClasses(eco:Collection eco:Item)
AnnotationAssertion(rdfs:label eco:Combination "Combinación"@es)
AnnotationAssertion(rdfs:comment eco:Combination "Una combinación es una colección homogénea, con unicidad, no ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:label eco:Combination "Combination"@en)
AnnotationAssertion(rdfs:comment eco:Combination "A combination is an homogeneous, with uniqueness, non ordered and with fixed cardinality collection."@en)
SubClassOf(eco:Combination eco:Heterocombination)
SubClassOf(eco:Combination eco:Multicombination)
SubClassOf(eco:Combination eco:Set)
AnnotationAssertion(rdfs:comment eco:FixedCardinalityCollection "A fixed cardiality collection is a collection of a fixed number of elements."@en)
AnnotationAssertion(rdfs:comment eco:FixedCardinalityCollection "Una colección de cardinalidad fija es una colección con un número fijo de elementos."@es)
AnnotationAssertion(rdfs:label eco:FixedCardinalityCollection "Fixed cardinality collection"@en)
AnnotationAssertion(rdfs:label eco:FixedCardinalityCollection "Colección de cardinalidad fija"@es)
SubClassOf(eco:FixedCardinalityCollection eco:Collection)
AnnotationAssertion(rdfs:label eco:Heterocombination "Heterocombination"@en)
AnnotationAssertion(rdfs:comment eco:Heterocombination "Una heterocombinación es una colección heterogénea, con unicidad, no ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:comment eco:Heterocombination "An heterocombination is an heterogeneous, with uniqueness, non ordered and with fixed cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Heterocombination "Heterocombinación"@es)
SubClassOf(eco:Heterocombination eco:Box)
SubClassOf(eco:Heterocombination eco:Heteroset)
AnnotationAssertion(rdfs:comment eco:Heteroranking "An heteroranking is an heterogeneous, with uniqueness, ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Heteroranking "Heteroranking"@en)
AnnotationAssertion(rdfs:comment eco:Heteroranking "Un heteroranking es una colección heterogénea, con unicidad, ordenada y de cardinalidad variable."@es)
AnnotationAssertion(rdfs:label eco:Heteroranking "Heteroranking"@es)
SubClassOf(eco:Heteroranking eco:Heteroset)
SubClassOf(eco:Heteroranking eco:List)
AnnotationAssertion(rdfs:comment eco:Heteroset "Un heteroconjunto es una colección heterogénea, con unicidad, no ordenada y de cardinalidad variable."@es)
AnnotationAssertion(rdfs:label eco:Heteroset "Heteroset"@en)
AnnotationAssertion(rdfs:comment eco:Heteroset "A heteroset is an heterogeneous, with uniqueness, non ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Heteroset "Heteroconjunto"@es)
SubClassOf(eco:Heteroset eco:Multiheteroset)
SubClassOf(eco:Heteroset eco:UniquenessCollection)
AnnotationAssertion(rdfs:comment eco:Heterovariation "An heterovariation is an heterogeneous, with uniqueness, ordered and with fixed cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Heterovariation "Heterovariation"@en)
AnnotationAssertion(rdfs:label eco:Heterovariation "Heterovariación"@es)
AnnotationAssertion(rdfs:comment eco:Heterovariation "Una heterovariación es una colección heterogénea, con unicidad, ordenada y de cardinalidad fija."@es)
SubClassOf(eco:Heterovariation eco:Heterocombination)
SubClassOf(eco:Heterovariation eco:Heteroranking)
SubClassOf(eco:Heterovariation eco:Tuple)
AnnotationAssertion(rdfs:label eco:HomogeneousCollection "Colección homogénea"@es)
AnnotationAssertion(rdfs:comment eco:HomogeneousCollection "Una coleccion homogénea es una colección donde todos los elementos son del mismo tipo."@es)
AnnotationAssertion(rdfs:label eco:HomogeneousCollection "Homogeneous collection"@en)
AnnotationAssertion(rdfs:comment eco:HomogeneousCollection "An homogeneous collection is a collection with all its element of the same type."@en)
EquivalentClasses(eco:HomogeneousCollection ObjectIntersectionOf(ObjectExactCardinality(1 eco:hasElementsOfType) eco:Collection))
AnnotationAssertion(rdfs:comment eco:Item "Un item es un contenedor para los elementos de las colecciones. Es un rodeo para permitir la duplicidad de elementos en la colecciones."@es)
AnnotationAssertion(rdfs:label eco:Item "Item"@es)
AnnotationAssertion(rdfs:comment eco:Item "An item is a container for elements of collections. It's a workaround to allow duplicate elements in a collections."@en)
AnnotationAssertion(rdfs:label eco:Item "Item"@en)
AnnotationAssertion(rdfs:comment eco:List "A list is an heterogeneous, without uniqueness, ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:List "Lista"@es)
AnnotationAssertion(rdfs:label eco:List "List"@en)
AnnotationAssertion(rdfs:comment eco:List "Una lista es una colección heterogénea, sin unicidad, ordenada y de cardinalidad variable."@es)
SubClassOf(eco:List eco:Multiheteroset)
SubClassOf(eco:List eco:OrderedCollection)
AnnotationAssertion(rdfs:label eco:Multicombination "Multicombination"@en)
AnnotationAssertion(rdfs:comment eco:Multicombination "Una multicombinación es una colección homogénea, sin unicidad, no ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:label eco:Multicombination "Multicombinación"@es)
AnnotationAssertion(rdfs:comment eco:Multicombination "A multicombination is an homogeneous, without uniqueness, non ordered and with fixed cardinality collection."@en)
SubClassOf(eco:Multicombination eco:Box)
SubClassOf(eco:Multicombination eco:Multiset)
AnnotationAssertion(rdfs:comment eco:Multiheteroset "Un multiheteroconjunto es una colección heterogénea, sin unicidad, no ordenada y de cardilnalidad variable."@es)
AnnotationAssertion(rdfs:label eco:Multiheteroset "Multiheteroset"@en)
AnnotationAssertion(rdfs:label eco:Multiheteroset "Multiheteroconjunto"@es)
AnnotationAssertion(rdfs:comment eco:Multiheteroset "A multiheteroset is an heterogeneous, without uniqueness, non ordered and with variable cardinality collection."@en)
SubClassOf(eco:Multiheteroset eco:Collection)
AnnotationAssertion(rdfs:comment eco:Multiset "Un multiconjunto es una colección homogenea, sin unicidad, no ordenada y de cardinalidad variable."@es)
AnnotationAssertion(rdfs:label eco:Multiset "Multiset"@en)
AnnotationAssertion(rdfs:comment eco:Multiset "A multiset is an homogeneous, without uniqueness, non ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Multiset "Multiconjunto"@es)
SubClassOf(eco:Multiset eco:HomogeneousCollection)
SubClassOf(eco:Multiset eco:Multiheteroset)
AnnotationAssertion(rdfs:label eco:OrderedCollection "Ordered collection"@en)
AnnotationAssertion(rdfs:label eco:OrderedCollection "Colección ordenada"@es)
AnnotationAssertion(rdfs:comment eco:OrderedCollection "An ordered collection is a collection where elements follow a sequential order."@en)
AnnotationAssertion(rdfs:comment eco:OrderedCollection "Una colección ordenada es una colección donde los elementos siguen un orden secuencial."@es)
EquivalentClasses(eco:OrderedCollection ObjectIntersectionOf(eco:Collection ObjectAllValuesFrom(eco:hasItem eco:OrderedItem) ObjectMaxCardinality(1 eco:hasFirstItem) ObjectMaxCardinality(1 eco:hasLastItem)))
AnnotationAssertion(rdfs:comment eco:OrderedItem "An ordered item is an item that is part of an ordered sequence of items."@en)
AnnotationAssertion(rdfs:label eco:OrderedItem "Ordered item"@en)
AnnotationAssertion(rdfs:comment eco:OrderedItem "Un item ordenado es un item que forma parte de una secuencia ordenada de items."@es)
AnnotationAssertion(rdfs:label eco:OrderedItem "Item ordenado"@es)
EquivalentClasses(eco:OrderedItem ObjectIntersectionOf(eco:Item ObjectMaxCardinality(1 eco:hasNextItem) ObjectMaxCardinality(1 eco:hasPreviousItem) DataExactCardinality(1 eco:hasIndex xsd:positiveInteger)))
AnnotationAssertion(rdfs:label eco:Ranking "Ranking"@en)
AnnotationAssertion(rdfs:comment eco:Ranking "Un ranking es una colección homogénea, con unicidad, ordenada y de cardinalidad variable."@es)
AnnotationAssertion(rdfs:comment eco:Ranking "A ranking is an homogeneous, with uniqueness, ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Ranking "Ranking"@es)
SubClassOf(eco:Ranking eco:Heteroranking)
SubClassOf(eco:Ranking eco:Sequence)
SubClassOf(eco:Ranking eco:Set)
AnnotationAssertion(rdfs:label eco:Sequence "Sequence"@en)
AnnotationAssertion(rdfs:label eco:Sequence "Secuencia"@es)
AnnotationAssertion(rdfs:comment eco:Sequence "Una secuencia es una colección homogenea, sin unicidad, ordenada y de cardinalidad variable."@es)
AnnotationAssertion(rdfs:comment eco:Sequence "A sequence is an homogeneous, without uniqueness, ordered and with variable cardinality collection."@en)
SubClassOf(eco:Sequence eco:List)
SubClassOf(eco:Sequence eco:Multiset)
AnnotationAssertion(rdfs:label eco:Set "Conjunto"@es)
AnnotationAssertion(rdfs:comment eco:Set "Un conjunto es una colección homogénea, con unicidad, no ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:comment eco:Set "A set is an homogeneous, with uniqueness, non ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Set "Set"@en)
SubClassOf(eco:Set eco:Heteroset)
SubClassOf(eco:Set eco:Multiset)
AnnotationAssertion(rdfs:comment eco:Tuple "Una tupla es una colección heterogénea, sin unicidad, ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:label eco:Tuple "Tupla"@es)
AnnotationAssertion(rdfs:label eco:Tuple "Tuple"@en)
AnnotationAssertion(rdfs:comment eco:Tuple "A tuple is an heterogeneous, without uniqueness, ordered and with fixed cardinality collection."@en)
SubClassOf(eco:Tuple eco:Box)
SubClassOf(eco:Tuple eco:List)
AnnotationAssertion(rdfs:comment eco:UniquenessCollection "An uniqueness collection is a collection where each element appears at most one time, that is, element repetitions are not allowed."@en)
AnnotationAssertion(rdfs:label eco:UniquenessCollection "Uniqueness collection"@en)
AnnotationAssertion(rdfs:comment eco:UniquenessCollection "Una colección con unicidad es una colección donde cada elemento aparece a lo sumo una vez, es decir, donde no se permiten las repeticiones de elementos."@es)
AnnotationAssertion(rdfs:label eco:UniquenessCollection "Colección con unicidad"@es)
SubClassOf(eco:UniquenessCollection eco:Collection)
AnnotationAssertion(rdfs:comment eco:Variation "Una variación es una colección homogénea, con unicidad, ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:comment eco:Variation "A variation is an homogeneous, with uniqueness, ordered and with fixed cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Variation "Variación"@es)
AnnotationAssertion(rdfs:label eco:Variation "Variation"@en)
SubClassOf(eco:Variation eco:Combination)
SubClassOf(eco:Variation eco:Heterovariation)
SubClassOf(eco:Variation eco:Ranking)
SubClassOf(eco:Variation eco:Vector)
AnnotationAssertion(rdfs:label eco:Vector "Vector"@en)
AnnotationAssertion(rdfs:comment eco:Vector "Un vector es una colección homogénea, sin unicidad, ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:label eco:Vector "Vector"@es)
AnnotationAssertion(rdfs:comment eco:Vector "A vector is an homogeneous, without uniqueness, ordered and with fixed cardinality collection."@en)
SubClassOf(eco:Vector eco:Multicombination)
SubClassOf(eco:Vector eco:Sequence)
SubClassOf(eco:Vector eco:Tuple)
AnnotationAssertion(rdfs:label <http://purl.org/ceu/eco#1CardinalityCollection> "1-cardinality collection"@en)
AnnotationAssertion(rdfs:label <http://purl.org/ceu/eco#1CardinalityCollection> "Colección de cardinalidad 1"@es)
AnnotationAssertion(rdfs:label <http://purl.org/ceu/eco#1CardinalityCollection> "Colección de cardinalidad fija que contiene exactamente un elemento."@es)
AnnotationAssertion(rdfs:label <http://purl.org/ceu/eco#1CardinalityCollection> "Fixed cardinality collection with exactly 1 element."@en)
EquivalentClasses(<http://purl.org/ceu/eco#1CardinalityCollection> ObjectIntersectionOf(ObjectExactCardinality(1 eco:hasItem eco:Item) eco:FixedCardinalityCollection))
AnnotationAssertion(rdfs:comment <http://purl.org/ceu/eco#2CardinalityCollection> "Fixed cardinality collection with exactly 2 elements."@en)
AnnotationAssertion(rdfs:comment <http://purl.org/ceu/eco#2CardinalityCollection> "Colección de cardinalidad fija que contiene exactamente 2 elementos."@es)
AnnotationAssertion(rdfs:label <http://purl.org/ceu/eco#2CardinalityCollection> "2-cardinality collection"@en)
AnnotationAssertion(rdfs:label <http://purl.org/ceu/eco#2CardinalityCollection> "Colección de cardinalidad 2"@es)
EquivalentClasses(<http://purl.org/ceu/eco#2CardinalityCollection> ObjectIntersectionOf(ObjectExactCardinality(2 eco:hasItem eco:Item) eco:FixedCardinalityCollection))
AnnotationAssertion(rdfs:comment <http://purl.org/ceu/eco#3CardinalityCollection> "Fixed cardinality collection with exactly 3 elements."@en)
AnnotationAssertion(rdfs:label <http://purl.org/ceu/eco#3CardinalityCollection> "Colección de cardinalidad 3"@es)
AnnotationAssertion(rdfs:comment <http://purl.org/ceu/eco#3CardinalityCollection> "Colección de cardinalidad fija que contiene exactamente 3 elementos."@es)
AnnotationAssertion(rdfs:label <http://purl.org/ceu/eco#3CardinalityCollection> "3-cardinality collection"@en)
EquivalentClasses(<http://purl.org/ceu/eco#3CardinalityCollection> ObjectIntersectionOf(ObjectExactCardinality(3 eco:hasItem eco:Item) eco:FixedCardinalityCollection))
AnnotationAssertion(rdfs:label eco:followedByItem "seguido por item"@es)
AnnotationAssertion(rdfs:comment eco:followedByItem "Propiedad que relaciona un item ordenado con otro que le sigue después en una misma colección ordenada."@es)
AnnotationAssertion(rdfs:label eco:followedByItem "followed by item"@en)
AnnotationAssertion(rdfs:comment eco:followedByItem "Property that relates an ordered item with another that follows it after in the same ordered collection."@en)
InverseObjectProperties(eco:followedByItem eco:precededByItem)
TransitiveObjectProperty(eco:followedByItem)
ObjectPropertyDomain(eco:followedByItem eco:OrderedItem)
ObjectPropertyRange(eco:followedByItem eco:OrderedItem)
AnnotationAssertion(rdfs:label eco:hasContent "has content"@en)
AnnotationAssertion(rdfs:comment eco:hasContent "Property that relates an item with the element or object that contains."@en)
AnnotationAssertion(rdfs:comment eco:hasContent "Propiedad que relaciona un Item con el elemento u objecto que contiene."@es)
AnnotationAssertion(rdfs:label eco:hasContent "contiene"@es)
SubObjectPropertyOf(eco:hasContent owl:topObjectProperty)
FunctionalObjectProperty(eco:hasContent)
ObjectPropertyDomain(eco:hasContent eco:Item)
ObjectPropertyRange(eco:hasContent ObjectComplementOf(eco:Item))
AnnotationAssertion(rdfs:comment eco:hasElement "Propiedad que relaciona una colección con un elemento que pertenece a ella."@es)
AnnotationAssertion(rdfs:label eco:hasElement "tiene elemento"@es)
AnnotationAssertion(rdfs:label eco:hasElement "has element"@en)
AnnotationAssertion(rdfs:comment eco:hasElement "Property that relates a collection with an element that belongs to it."@en)
InverseObjectProperties(eco:hasElement eco:isElementOf)
ObjectPropertyDomain(eco:hasElement eco:Collection)
ObjectPropertyRange(eco:hasElement ObjectComplementOf(eco:Item))
AnnotationAssertion(rdfs:comment eco:hasElementsOfType "Propiedad que relaciona una colección homogénea con la clase de elementos que contiene."@es)
AnnotationAssertion(rdfs:label eco:hasElementsOfType "has elements of type"@en)
AnnotationAssertion(rdfs:label eco:hasElementsOfType "tiene elementos de tipo"@es)
AnnotationAssertion(rdfs:comment eco:hasElementsOfType "Property that relates an homogeneous collection with the class of its elements."@en)
FunctionalObjectProperty(eco:hasElementsOfType)
ObjectPropertyDomain(eco:hasElementsOfType eco:HomogeneousCollection)
AnnotationAssertion(rdfs:comment eco:hasFirstItem "Propiedad que relaciona una colección ordenada con su primer item."@es)
AnnotationAssertion(rdfs:label eco:hasFirstItem "has first item"@en)
AnnotationAssertion(rdfs:comment eco:hasFirstItem "Property that relates an ordered collection with its first item."@en)
AnnotationAssertion(rdfs:label eco:hasFirstItem "tiene primer item"@es)
SubObjectPropertyOf(eco:hasFirstItem eco:hasOrderedItem)
InverseObjectProperties(eco:hasFirstItem eco:isFirstItemOf)
FunctionalObjectProperty(eco:hasFirstItem)
ObjectPropertyRange(eco:hasFirstItem ObjectIntersectionOf(eco:OrderedItem ObjectExactCardinality(0 eco:hasPreviousItem) DataHasValue(eco:hasIndex "1"^^xsd:positiveInteger)))
AnnotationAssertion(rdfs:label eco:hasItem "tiene item"@es)
AnnotationAssertion(rdfs:comment eco:hasItem "Property that relates a collection with an item that is part of it."@en)
AnnotationAssertion(rdfs:label eco:hasItem "has item"@en)
AnnotationAssertion(rdfs:comment eco:hasItem "Propiedad que relaciona una colección con un item que forma parte de ella."@es)
InverseObjectProperties(eco:hasItem eco:isItemOf)
InverseFunctionalObjectProperty(eco:hasItem)
ObjectPropertyDomain(eco:hasItem eco:Collection)
ObjectPropertyRange(eco:hasItem eco:Item)
AnnotationAssertion(rdfs:comment eco:hasLastItem "Property that relates an ordered collection with its last item."@en)
AnnotationAssertion(rdfs:comment eco:hasLastItem "Propiedad que relaciona una colección ordenada con su último item."@es)
AnnotationAssertion(rdfs:label eco:hasLastItem "tiene último item"@es)
AnnotationAssertion(rdfs:label eco:hasLastItem "has last item"@en)
SubObjectPropertyOf(eco:hasLastItem eco:hasOrderedItem)
InverseObjectProperties(eco:isLastItemOf eco:hasLastItem)
FunctionalObjectProperty(eco:hasLastItem)
ObjectPropertyRange(eco:hasLastItem ObjectIntersectionOf(ObjectExactCardinality(0 eco:hasNextItem) eco:OrderedItem))
AnnotationAssertion(rdfs:comment eco:hasNextItem "Property that relates an ordered item with other that follows it immediately in the same ordered collection."@en)
AnnotationAssertion(rdfs:label eco:hasNextItem "tiene siguiente item"@es)
AnnotationAssertion(rdfs:label eco:hasNextItem "has next item"@en)
AnnotationAssertion(rdfs:comment eco:hasNextItem "Propiedad que relaciona un item ordenado con otro que le sigue inmediatamente en un misma colección ordenada."@es)
SubObjectPropertyOf(eco:hasNextItem eco:followedByItem)
InverseObjectProperties(eco:hasPreviousItem eco:hasNextItem)
FunctionalObjectProperty(eco:hasNextItem)
InverseFunctionalObjectProperty(eco:hasNextItem)
AnnotationAssertion(rdfs:comment eco:hasOrderedItem "Propiedad que relaciona una colección ordenada con un item ordenado que forma parte de ella."@es)
AnnotationAssertion(rdfs:label eco:hasOrderedItem "tiene item ordenado"@es)
AnnotationAssertion(rdfs:label eco:hasOrderedItem "has ordered item"@en)
AnnotationAssertion(rdfs:comment eco:hasOrderedItem "Property that relates an ordered collection with an ordered item that is part of it."@en)
SubObjectPropertyOf(eco:hasOrderedItem eco:hasItem)
InverseObjectProperties(eco:hasOrderedItem eco:isOrderedItemOf)
ObjectPropertyDomain(eco:hasOrderedItem eco:OrderedCollection)
ObjectPropertyRange(eco:hasOrderedItem eco:OrderedItem)
AnnotationAssertion(rdfs:label eco:hasPreviousItem "tiene previo item"@es)
AnnotationAssertion(rdfs:comment eco:hasPreviousItem "Property that relates an ordered item with another that precedes it immediately in the same ordered collection."@en)
AnnotationAssertion(rdfs:label eco:hasPreviousItem "has previous item"@en)
AnnotationAssertion(rdfs:comment eco:hasPreviousItem "Propiedad que relaciona un item ordenado con otro que le precede inmediatamente en una misma colección ordenada."@es)
SubObjectPropertyOf(eco:hasPreviousItem eco:precededByItem)
FunctionalObjectProperty(eco:hasPreviousItem)
InverseFunctionalObjectProperty(eco:hasPreviousItem)
AnnotationAssertion(rdfs:comment eco:isElementOf "Propiedad que relaciona un elemento u objeto con una colección a la que pertenece."@es)
AnnotationAssertion(rdfs:comment eco:isElementOf "Property that relates an element or object with a collection that belongs to."@en)
AnnotationAssertion(rdfs:label eco:isElementOf "is element of"@en)
AnnotationAssertion(rdfs:label eco:isElementOf "es elemento de"@es)
ObjectPropertyRange(eco:isElementOf eco:Collection)
AnnotationAssertion(rdfs:comment eco:isFirstItemOf "Propiedad que relaciona un item ordenado con una colección ordenada en la que el item ocupa la primera posición."@es)
AnnotationAssertion(rdfs:label eco:isFirstItemOf "es primer item de"@es)
AnnotationAssertion(rdfs:comment eco:isFirstItemOf "Property that relates an ordered item with an ordered collection in which the item occupies the first position."@en)
AnnotationAssertion(rdfs:label eco:isFirstItemOf "is first item of"@en)
SubObjectPropertyOf(eco:isFirstItemOf eco:isOrderedItemOf)
AnnotationAssertion(rdfs:label eco:isItemOf "is item of"@en)
AnnotationAssertion(rdfs:comment eco:isItemOf "Propiedad que relaciona un item con la colección de la que forma parte."@es)
AnnotationAssertion(rdfs:label eco:isItemOf "es item de"@es)
AnnotationAssertion(rdfs:comment eco:isItemOf "Property that relates an item with the collection that is part of."@en)
AnnotationAssertion(rdfs:label eco:isLastItemOf "es último item de"@es)
AnnotationAssertion(rdfs:comment eco:isLastItemOf "Property that relates an ordered item with an ordered collection in which the item occupies the last position."@en)
AnnotationAssertion(rdfs:comment eco:isLastItemOf "Propiedad que relaciona un item ordenado con una colección ordenada en la que el item ocupa la última posición."@es)
AnnotationAssertion(rdfs:label eco:isLastItemOf "is last item of"@en)
SubObjectPropertyOf(eco:isLastItemOf eco:isOrderedItemOf)
AnnotationAssertion(rdfs:label eco:isOrderedItemOf "is ordered item of"@en)
AnnotationAssertion(rdfs:comment eco:isOrderedItemOf "Propiedad que relaciona un item ordenado con la colección ordenada a la que pertenece."@es)
AnnotationAssertion(rdfs:label eco:isOrderedItemOf "es item ordenado de"@es)
AnnotationAssertion(rdfs:comment eco:isOrderedItemOf "Property that relates an ordered item with the ordered collection that belongs to."@en)
SubObjectPropertyOf(eco:isOrderedItemOf eco:isItemOf)
AnnotationAssertion(rdfs:label eco:precededByItem "precedido por item"@es)
AnnotationAssertion(rdfs:comment eco:precededByItem "Property that relates an ordered item with another that precedes it in the same ordered collection."@en)
AnnotationAssertion(rdfs:label eco:precededByItem "preceded by item"@en)
AnnotationAssertion(rdfs:comment eco:precededByItem "Propiedad que relaciona un item ordenado con otro que le precede en una misma colección ordenada."@es)
TransitiveObjectProperty(eco:precededByItem)
ObjectPropertyDomain(eco:precededByItem eco:OrderedItem)
ObjectPropertyRange(eco:precededByItem eco:OrderedItem)
AnnotationAssertion(rdfs:comment eco:hasCardinality "Propiedad que relaciona una colección con el número de elementos que contiene."@es)
AnnotationAssertion(rdfs:label eco:hasCardinality "tiene cardinalidad"@es)
AnnotationAssertion(rdfs:label eco:hasCardinality "has cardinality"@en)
AnnotationAssertion(rdfs:comment eco:hasCardinality "Property that relates a collection with the number of elements or objects that contains."@en)
FunctionalDataProperty(eco:hasCardinality)
DataPropertyDomain(eco:hasCardinality eco:Collection)
DataPropertyRange(eco:hasCardinality xsd:nonNegativeInteger)
AnnotationAssertion(rdfs:comment eco:hasIndex "Property that relates an ordered item with its position in an ordered collection."@en)
AnnotationAssertion(rdfs:label eco:hasIndex "tiene índice"@es)
AnnotationAssertion(rdfs:label eco:hasIndex "has index"@en)
AnnotationAssertion(rdfs:comment eco:hasIndex "Propiedad que relaciona un item ordenado con su posición en una colección ordenada."@es)
FunctionalDataProperty(eco:hasIndex)
DataPropertyDomain(eco:hasIndex eco:OrderedItem)
DataPropertyRange(eco:hasIndex xsd:positiveInteger)
AnnotationAssertion(rdfs:comment eco:Box "A box is an heterogeneous, without uniqueness, non ordered and with fixed cardinality collection."@en)
AnnotationAssertion(rdfs:comment eco:Box "Una caja es una colección heterogénea, sin unicidad, no ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:label eco:Box "Caja"@es)
AnnotationAssertion(rdfs:label eco:Box "Box"@en)
ClassAssertion(eco:Box eco:Box)
AnnotationAssertion(rdfs:comment eco:Collection "A collection is a group of objects or elements."@en)
AnnotationAssertion(rdfs:comment eco:Collection "Una colección es una agrupación de objetos o elementos."@es)
AnnotationAssertion(rdfs:label eco:Collection "Colección"@es)
AnnotationAssertion(rdfs:label eco:Collection "Collection"@en)
ClassAssertion(eco:Collection eco:Collection)
AnnotationAssertion(rdfs:label eco:Combination "Combinación"@es)
AnnotationAssertion(rdfs:comment eco:Combination "Una combinación es una colección homogénea, con unicidad, no ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:label eco:Combination "Combination"@en)
AnnotationAssertion(rdfs:comment eco:Combination "A combination is an homogeneous, with uniqueness, non ordered and with fixed cardinality collection."@en)
ClassAssertion(eco:Combination eco:Combination)
AnnotationAssertion(rdfs:label eco:Heterocombination "Heterocombination"@en)
AnnotationAssertion(rdfs:comment eco:Heterocombination "Una heterocombinación es una colección heterogénea, con unicidad, no ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:comment eco:Heterocombination "An heterocombination is an heterogeneous, with uniqueness, non ordered and with fixed cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Heterocombination "Heterocombinación"@es)
ClassAssertion(eco:Heterocombination eco:Heterocombination)
AnnotationAssertion(rdfs:comment eco:Heteroranking "An heteroranking is an heterogeneous, with uniqueness, ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Heteroranking "Heteroranking"@en)
AnnotationAssertion(rdfs:comment eco:Heteroranking "Un heteroranking es una colección heterogénea, con unicidad, ordenada y de cardinalidad variable."@es)
AnnotationAssertion(rdfs:label eco:Heteroranking "Heteroranking"@es)
ClassAssertion(eco:Heteroranking eco:Heteroranking)
AnnotationAssertion(rdfs:comment eco:Heteroset "Un heteroconjunto es una colección heterogénea, con unicidad, no ordenada y de cardinalidad variable."@es)
AnnotationAssertion(rdfs:label eco:Heteroset "Heteroset"@en)
AnnotationAssertion(rdfs:comment eco:Heteroset "A heteroset is an heterogeneous, with uniqueness, non ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Heteroset "Heteroconjunto"@es)
ClassAssertion(eco:Heteroset eco:Heteroset)
AnnotationAssertion(rdfs:comment eco:Heterovariation "An heterovariation is an heterogeneous, with uniqueness, ordered and with fixed cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Heterovariation "Heterovariation"@en)
AnnotationAssertion(rdfs:label eco:Heterovariation "Heterovariación"@es)
AnnotationAssertion(rdfs:comment eco:Heterovariation "Una heterovariación es una colección heterogénea, con unicidad, ordenada y de cardinalidad fija."@es)
ClassAssertion(eco:Heterovariation eco:Heterovariation)
AnnotationAssertion(rdfs:comment eco:List "A list is an heterogeneous, without uniqueness, ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:List "Lista"@es)
AnnotationAssertion(rdfs:label eco:List "List"@en)
AnnotationAssertion(rdfs:comment eco:List "Una lista es una colección heterogénea, sin unicidad, ordenada y de cardinalidad variable."@es)
ClassAssertion(eco:List eco:List)
AnnotationAssertion(rdfs:label eco:Multicombination "Multicombination"@en)
AnnotationAssertion(rdfs:comment eco:Multicombination "Una multicombinación es una colección homogénea, sin unicidad, no ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:label eco:Multicombination "Multicombinación"@es)
AnnotationAssertion(rdfs:comment eco:Multicombination "A multicombination is an homogeneous, without uniqueness, non ordered and with fixed cardinality collection."@en)
ClassAssertion(eco:Multicombination eco:Multicombination)
AnnotationAssertion(rdfs:comment eco:Multiheteroset "Un multiheteroconjunto es una colección heterogénea, sin unicidad, no ordenada y de cardilnalidad variable."@es)
AnnotationAssertion(rdfs:label eco:Multiheteroset "Multiheteroset"@en)
AnnotationAssertion(rdfs:label eco:Multiheteroset "Multiheteroconjunto"@es)
AnnotationAssertion(rdfs:comment eco:Multiheteroset "A multiheteroset is an heterogeneous, without uniqueness, non ordered and with variable cardinality collection."@en)
ClassAssertion(eco:Multiheteroset eco:Multiheteroset)
AnnotationAssertion(rdfs:comment eco:Multiset "Un multiconjunto es una colección homogenea, sin unicidad, no ordenada y de cardinalidad variable."@es)
AnnotationAssertion(rdfs:label eco:Multiset "Multiset"@en)
AnnotationAssertion(rdfs:comment eco:Multiset "A multiset is an homogeneous, without uniqueness, non ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Multiset "Multiconjunto"@es)
ClassAssertion(eco:Multiset eco:Multiset)
AnnotationAssertion(rdfs:label eco:Ranking "Ranking"@en)
AnnotationAssertion(rdfs:comment eco:Ranking "Un ranking es una colección homogénea, con unicidad, ordenada y de cardinalidad variable."@es)
AnnotationAssertion(rdfs:comment eco:Ranking "A ranking is an homogeneous, with uniqueness, ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Ranking "Ranking"@es)
ClassAssertion(eco:Ranking eco:Ranking)
AnnotationAssertion(rdfs:label eco:Sequence "Sequence"@en)
AnnotationAssertion(rdfs:label eco:Sequence "Secuencia"@es)
AnnotationAssertion(rdfs:comment eco:Sequence "Una secuencia es una colección homogenea, sin unicidad, ordenada y de cardinalidad variable."@es)
AnnotationAssertion(rdfs:comment eco:Sequence "A sequence is an homogeneous, without uniqueness, ordered and with variable cardinality collection."@en)
ClassAssertion(eco:Sequence eco:Sequence)
AnnotationAssertion(rdfs:label eco:Set "Conjunto"@es)
AnnotationAssertion(rdfs:comment eco:Set "Un conjunto es una colección homogénea, con unicidad, no ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:comment eco:Set "A set is an homogeneous, with uniqueness, non ordered and with variable cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Set "Set"@en)
ClassAssertion(eco:Set eco:Set)
AnnotationAssertion(rdfs:comment eco:Tuple "Una tupla es una colección heterogénea, sin unicidad, ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:label eco:Tuple "Tupla"@es)
AnnotationAssertion(rdfs:label eco:Tuple "Tuple"@en)
AnnotationAssertion(rdfs:comment eco:Tuple "A tuple is an heterogeneous, without uniqueness, ordered and with fixed cardinality collection."@en)
ClassAssertion(eco:Tuple eco:Tuple)
AnnotationAssertion(rdfs:comment eco:Variation "Una variación es una colección homogénea, con unicidad, ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:comment eco:Variation "A variation is an homogeneous, with uniqueness, ordered and with fixed cardinality collection."@en)
AnnotationAssertion(rdfs:label eco:Variation "Variación"@es)
AnnotationAssertion(rdfs:label eco:Variation "Variation"@en)
ClassAssertion(eco:Variation eco:Variation)
AnnotationAssertion(rdfs:label eco:Vector "Vector"@en)
AnnotationAssertion(rdfs:comment eco:Vector "Un vector es una colección homogénea, sin unicidad, ordenada y de cardinalidad fija."@es)
AnnotationAssertion(rdfs:label eco:Vector "Vector"@es)
AnnotationAssertion(rdfs:comment eco:Vector "A vector is an homogeneous, without uniqueness, ordered and with fixed cardinality collection."@en)
ClassAssertion(eco:Vector eco:Vector)
ClassAssertion(eco:FixedCardinalityCollection eco:col1)
DLSafeRule(Body(DataPropertyAtom(eco:hasCardinality Variable(<urn:swrl#collection>) "1"^^xsd:integer) ClassAtom(eco:FixedCardinalityCollection Variable(<urn:swrl#collection>)))Head(ClassAtom(ObjectExactCardinality(1 eco:hasItem eco:Item) Variable(<urn:swrl#collection>))))
DLSafeRule(Body(ClassAtom(eco:UniquenessCollection Variable(<urn:swrl#collection>)) ObjectPropertyAtom(eco:hasContent Variable(<urn:swrl#item1>) Variable(<urn:swrl#element1>)) ObjectPropertyAtom(eco:hasContent Variable(<urn:swrl#item2>) Variable(<urn:swrl#element2>)) DifferentIndividualsAtom(Variable(<urn:swrl#item1>) Variable(<urn:swrl#item2>)) ObjectPropertyAtom(eco:hasItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#item1>)) ObjectPropertyAtom(eco:hasItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#item2>)) SameIndividualAtom(Variable(<urn:swrl#element1>) Variable(<urn:swrl#element2>)))Head(DataPropertyAtom(<http://www.essepuntato.it/2009/10/error/hasError> Variable(<urn:swrl#collection>) "A colllection with uniqueness has repeated elements")))
DLSafeRule(Body(ObjectPropertyAtom(eco:hasOrderedItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#item1>)) ObjectPropertyAtom(eco:followedByItem Variable(<urn:swrl#item1>) Variable(<urn:swrl#item2>)))Head(ObjectPropertyAtom(eco:hasOrderedItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#item2>))))
DLSafeRule(Body(ObjectPropertyAtom(eco:followedByItem Variable(<urn:swrl#item2>) Variable(<urn:swrl#item1>)) ObjectPropertyAtom(eco:followedByItem Variable(<urn:swrl#item1>) Variable(<urn:swrl#item2>)))Head(DataPropertyAtom(<http://www.essepuntato.it/2009/10/error/hasError> Variable(<urn:swrl#item1>) "An ordered item can not be followed and preceded at the same time by another item")))
DLSafeRule(Body(ClassAtom(ObjectComplementOf(eco:UniquenessCollection) Variable(<urn:swrl#collecction>)) ObjectPropertyAtom(eco:hasLastItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#last>)) DataPropertyAtom(eco:hasCardinality Variable(<urn:swrl#collection>) Variable(<urn:swrl#n>)))Head(DataPropertyAtom(eco:hasIndex Variable(<urn:swrl#last>) Variable(<urn:swrl#n>))))
DLSafeRule(Body(ObjectPropertyAtom(eco:hasNextItem Variable(<urn:swrl#current>) Variable(<urn:swrl#next>)) DataPropertyAtom(eco:hasIndex Variable(<urn:swrl#current>) Variable(<urn:swrl#index>)) BuiltInAtom(swrlb:add Variable(<urn:swrl#nextindex>) Variable(<urn:swrl#index>) "1"^^xsd:integer))Head(DataPropertyAtom(eco:hasIndex Variable(<urn:swrl#next>) Variable(<urn:swrl#nextindex>))))
DLSafeRule(Body(ObjectPropertyAtom(eco:hasOrderedItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#item>)) DataPropertyAtom(eco:hasIndex Variable(<urn:swrl#item>) Variable(<urn:swrl#n>)) DataPropertyAtom(eco:hasCardinality Variable(<urn:swrl#collection>) Variable(<urn:swrl#n>)))Head(ObjectPropertyAtom(eco:hasLastItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#item>))))
DLSafeRule(Body(DataPropertyAtom(eco:hasIndex Variable(<urn:swrl#last>) Variable(<urn:swrl#n>)) ClassAtom(ObjectComplementOf(eco:UniquenessCollection) Variable(<urn:swrl#collecction>)) ObjectPropertyAtom(eco:hasLastItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#last>)))Head(DataPropertyAtom(eco:hasCardinality Variable(<urn:swrl#collection>) Variable(<urn:swrl#n>))))
DLSafeRule(Body(ObjectPropertyAtom(eco:followedByItem Variable(<urn:swrl#x>) Variable(<urn:swrl#x>)))Head(DataPropertyAtom(<http://www.essepuntato.it/2009/10/error/hasError> Variable(<urn:swrl#x>) "An ordered item cannot be followed by itself")))
DLSafeRule(Body(DataPropertyAtom(eco:hasCardinality Variable(<urn:swrl#collection>) "2"^^xsd:integer) ClassAtom(eco:FixedCardinalityCollection Variable(<urn:swrl#collection>)))Head(ClassAtom(ObjectExactCardinality(2 eco:hasItem eco:Item) Variable(<urn:swrl#collection>))))
DLSafeRule(Body(ObjectPropertyAtom(eco:hasOrderedItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#item2>)) DataPropertyAtom(eco:hasIndex Variable(<urn:swrl#item2>) Variable(<urn:swrl#j>)) DataPropertyAtom(eco:hasIndex Variable(<urn:swrl#item1>) Variable(<urn:swrl#i>)) ObjectPropertyAtom(eco:hasOrderedItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#item1>)) BuiltInAtom(swrlb:add Variable(<urn:swrl#j>) Variable(<urn:swrl#i>) "1"^^xsd:integer))Head(ObjectPropertyAtom(eco:hasNextItem Variable(<urn:swrl#item1>) Variable(<urn:swrl#item2>))))
SubObjectPropertyOf(ObjectPropertyChain(eco:hasItem eco:hasContent) eco:hasElement)
DLSafeRule(Body(ObjectPropertyAtom(eco:hasOrderedItem Variable(<urn:swrl#collection>) Variable(<urn:swrl#item>)) DataPropertyAtom(eco:hasIndex Variable(<urn:swrl#item>) "1"))Head(ObjectPropertyAtom(eco:hasFirstItem Variable(<urn:swrl#collectionl>) Variable(<urn:swrl#item>))))
DLSafeRule(Body(ClassAtom(eco:FixedCardinalityCollection Variable(<urn:swrl#collection>)) DataPropertyAtom(eco:hasCardinality Variable(<urn:swrl#collection>) "3"^^xsd:integer))Head(ClassAtom(ObjectExactCardinality(3 eco:hasItem eco:Item) Variable(<urn:swrl#collection>))))
DLSafeRule(Body(DataPropertyAtom(eco:hasIndex Variable(<urn:swrl#item>) Variable(<urn:swrl#index>)) ObjectPropertyAtom(eco:hasNextItem Variable(<urn:swrl#item>) Variable(<urn:swrl#nextitem>)) BuiltInAtom(swrlb:add Variable(<urn:swrl#nextindex>) Variable(<urn:swrl#index>) "1"^^xsd:integer))Head(DataPropertyAtom(eco:hasIndex Variable(<urn:swrl#nextitem>) Variable(<urn:swrl#nextindex>))))
)